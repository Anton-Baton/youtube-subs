version: '2'

services:
  # PostgreSQL database
  db:
    image: postgres:9.4
    hostname: db
    container_name: extension_db
    env_file: .env
    volumes:
      - "pgdata:/var/lib/postgresql/data/"
    ports:
      - "5432:5432"

  # RabbitMQ
  rabbit:
    hostname: rabbit
    container_name: extension_rabbit
    image: rabbitmq:3.6.0-management
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    expose:
      - "5672"
    ports:
#      - "5673:5672"  # we forward this port because it's useful for debugging
      - "15673:15672"  # here, we can access rabbitmq management plugin

  # Celery worker
  celery:
    build:
      context: .
      dockerfile: DockerfileCelery
    command: ./run_celery.sh
    container_name: extension_celery
    env_file: .env
    ports:
      - "5556:5555"
    volumes:
      - .:/app
    links:
      - db
      - rabbit

  # Django web server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: extension_backend
    hostname: backend
    env_file: .env
    command: ./run_server.sh
    volumes:
      - .:/app  # mount current directory inside container
    ports:
      - "8000"
    # set up links so that web knows about db, rabbit
    links:
      - db
      - rabbit
    depends_on:
      - db

  # Frontend container (static React files, index.html and bundle.js, served with nginx)
  frontend:
    build: ../subtitles-frontend
    volumes:
      - ../subtitles-frontend:/app/frontend
    container_name: extension_frontend
    hostname: frontend
#    working_dir: /app/frontend
    links:
      - backend

  nginx_proxy:
    build: ./configs/nginx
    container_name: extension_nginx
    # See the file nginx_proxy.conf
    # It uses these links to connect you to the two containers
    links:
      - backend
      - frontend
    ports:
      - '80:80'

volumes:
  pgdata:

networks:
  default: